{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/NewTodo/NewTodo.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","getUserById","usersFromServer","find","NewTodo","onAdd","useState","setTitle","userId","setUserId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","trim","htmlFor","type","placeholder","value","onChange","target","replace","disabled","todosWithUsers","createNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1225fbe4.chunk.js","sourcesContent":["import { User } from '../../types/user';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import cn from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn('TodoInfo', { 'TodoInfo--completed': todo.completed })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(id: number) {\n  return usersFromServer.find((user) => id === user.id) || null;\n}\n","import { ChangeEvent, FormEvent, useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { Todo } from '../../types/todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onAdd: (newTodo: Todo) => void;\n};\n\nexport const NewTodo: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title.trim());\n    setHasUserIdError(!userId);\n\n    if (!title.trim() || !userId) {\n      return;\n    }\n\n    onAdd({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <label htmlFor=\"title\">Title: </label>\n        <input\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n          data-cy=\"titleInput\"\n        />\n        {hasTitleError && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-select\">User: </label>\n        <select\n          id=\"user-select\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserChange}\n        >\n          <option value=\"0\" disabled>\n            Choose a user\n          </option>\n          {usersFromServer.map((user) => (\n            <option key={user.id} value={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { Todo } from './types/todo';\nimport { getUserById } from './services/user';\n\nconst todosWithUsers = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction createNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map((todo) => todo.id));\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosWithUsers);\n\n  const addNewTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: createNewTodoId(todos),\n    };\n\n    setTodos((currentTodos) => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <NewTodo onAdd={addNewTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}